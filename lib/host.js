/*** Generated by streamline 0.10.12 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb; (function() {
  var Bottleneck, a, asyncReplace, contentTypes, crypto, getHash, isAltered, rDomains, rLookbehind, redirectAllURLs, redirectToHash, settings, url;

  crypto = require("crypto");

  url = require("url");

  asyncReplace = require("async-replace");

  settings = require("../settings");

  Bottleneck = require("bottleneck");

  getHash = function getHash__1(redisClient, host, clientIP, _) { var hash, keys, savedHashKey, values; var __frame = { name: "getHash__1", line: 14 }; return __func(_, this, arguments, getHash__1, 3, __frame, function __$getHash__1() {

      savedHashKey = ((("hash-" + clientIP) + "-") + host);
      return redisClient.get(savedHashKey, __cb(_, __frame, 3, 23, function ___(__0, __2) { hash = __2; return (function __$getHash__1(__then) {
          if ((hash == null)) {
            return (crypto.pseudoRandomBytes(16, __cb(_, __frame, 5, 21, function ___(__0, __3) { hash = __3.toString("hex");
              keys = [("hostTunneling-" + hash),("xforwardedfor-" + hash),savedHashKey,];
              values = [host,clientIP,hash,];
              return keys.forEach_(__cb(_, __frame, 8, 11, __then, true), -1, function __1(_, k, i) { var __frame = { name: "__1", line: 22 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                  return redisClient.set([k,values[i],], __cb(_, __frame, 1, 20, function __$__1() {
                    return redisClient.expire([k,settings.hostTunnelingCaching,], __cb(_, __frame, 2, 27, _, true)); }, true)); }); }); }, true))); } else { __then(); } ; })(function __$getHash__1() {


          return _(null, hash); }); }, true)); }); };


  redirectToHash = function(res, hash, path) {
    var redirect;
    redirect = (((("https://" + hash) + ".") + settings.hostTunnelingDomain) + path);
    res.writeHead(302, {
      Location: redirect });

    return res.end((((("<html><body>The unblock.us.org project<br /><br />Unblocked at <a href=\"" + redirect) + "\">") + redirect) + "</a></body></html>")); };


  contentTypes = {
  "application/javascript": "application/javascript",
  "application/xhtml+xml": "application/xhtml+xml",
  "application/xml": "application/xml",
  "image/svg+xml": "image/svg+xml",
  "text/css": "text/css",
  "text/html": "text/html",
  "text/javascript": "text/javascript" };


  isAltered = function(ct) {
    return (contentTypes[ct] != null); };


  rDomains = new RegExp((("(.|^)(?:https://)?(?:(?:[a-zA-Z0-9-]+[.]{1})*?)?(?:" + ((function() {
    var _results;
    _results = [];
    for (a in settings.hijacked) {
      _results.push((("(?:" + a.replace(/[.]/g, "[.]")) + ")")); };

    return _results;
  })()).join("|")) + ")"), "g");

  rLookbehind = new RegExp("^[^a-zA-Z0-9-.]?$");

  redirectAllURLs = function redirectAllURLs__2(str, redisClient, clientIP, hashCache, _) { var limiter; var __frame = { name: "redirectAllURLs__2", line: 64 }; return __func(_, this, arguments, redirectAllURLs__2, 4, __frame, function __$redirectAllURLs__2() {

      limiter = new Bottleneck(1);
      return asyncReplace(str, rDomains, (function __1(found, lookbehind, position, text, _) { var formatted, hash, parsed; var __frame = { name: "__1", line: 67 }; return __func(_, this, arguments, __1, 4, __frame, function __$__1() {

          if (!rLookbehind.test(lookbehind)) {
            return _(null, found); } ;

          if ((lookbehind.length > 0)) {
            found = found.slice(1); } ;

          parsed = url.parse(found);
          parsed.path = "";
          parsed.pathname = "";
          if ((((parsed.host == null)) || ((parsed.hostname == null)))) {
            parsed.hostname = parsed.href; } ;

          parsed.host = null;
          if ((parsed.protocol != null)) {
            parsed.protocol = "https"; } ; return (function __$__1(__then) {

            if ((((hashCache[parsed.hostname] != null)) && false)) {
              parsed.hostname = ((hashCache[parsed.hostname] + ".") + settings.hostTunnelingDomain); __then(); } else {

              return limiter.submit(getHash, redisClient, parsed.hostname, clientIP, __cb(_, __frame, 21, 23, function ___(__0, __1) { hash = __1;
                hashCache[parsed.hostname] = hash;
                parsed.hostname = ((hash + ".") + settings.hostTunnelingDomain); __then(); }, true)); } ; })(function __$__1() {

            formatted = url.format(parsed);
            if ((formatted.slice(0, 2) === "//")) {
              return _(null, (lookbehind + formatted.slice(2))); }
             else {
              return _(null, (lookbehind + formatted)); } ; _(); }); }); }), __cb(_, __frame, 3, 11, _, true)); }); };




  module.exports = {
    getHash: getHash,
    redirectToHash: redirectToHash,
    isAltered: isAltered,
    redirectAllURLs: redirectAllURLs };


}).call(this);
