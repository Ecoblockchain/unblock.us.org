/*** Generated by streamline 0.10.9 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__trap=__rt.__trap; (function main(_) { var __this = this; var __frame = { name: "main", line: 1 }; return __func(_, this, arguments, main, 0, __frame, function __$main() {














































    return (function ___closure(_) { var counters, redis, redisClient, settings, showStats, util; util = require("util"); settings = require("../settings.js"); global.con = function() { return console.log(Array.prototype.concat(new Date().toISOString(), Array.prototype.slice.call(arguments, 0)).map(function(a) { return util.inspect(a); }).join(" ")); }; redis = require("redis"); redisClient = redis.createClient(); return redisClient.select(settings.redisDB, __cb(_, __frame, 17, 14, function __$___closure() { counters = ["https.fail.start","https.start","https.fail","https","udp.fail.start","udp.start","udp.fail","udp","tcp.fail.start","tcp.start","tcp.fail","tcp",]; showStats = function showStats__1(_) { var countersStats, countriesDNS, countriesHTTPS, ipDNScountries, ipHTTPScountries; var __frame = { name: "showStats__1", line: 22 }; return __func(_, this, arguments, showStats__1, 0, __frame, function __$showStats__1() { return redisClient.mget(counters, __cb(_, __frame, 2, 32, function ___(__0, __3) { countersStats = __3; console.log((((((((((((((((((((((((((new Date().toISOString() + " ") + "UDP ") + countersStats[6]) + "/") + countersStats[7]) + " ") + countersStats[4]) + "/") + countersStats[5]) + " TCP ") + countersStats[10]) + "/") + countersStats[11]) + " ") + countersStats[8]) + "/") + countersStats[9]) + " HTTPS ") + countersStats[2]) + "/") + countersStats[3]) + " ") + countersStats[0]) + "/") + countersStats[1])); return redisClient.hgetall("countries.dns", __cb(_, __frame, 4, 31, function ___(__0, __4) { countriesDNS = __4; return redisClient.hgetall("countries.https", __cb(_, __frame, 5, 33, function ___(__0, __5) { countriesHTTPS = __5; return redisClient.smembers("ip.dns.countries", __cb(_, __frame, 6, 33, function ___(__0, __6) { ipDNScountries = __6; return redisClient.smembers("ip.https.countries", __cb(_, __frame, 7, 35, function ___(__0, __7) { ipHTTPScountries = __7; return ipDNScountries.map_(__cb(_, __frame, 8, 36, function ___(__0, __8) { ipDNScountries = __8; return ipHTTPScountries.map_(__cb(_, __frame, 11, 40, function ___(__0, __9) { ipHTTPScountries = __9; con(countriesDNS); con(countriesHTTPS); con(ipDNScountries); return _(null, con(ipHTTPScountries)); }, true), 10, function __2(_, country) { var __frame = { name: "__2", line: 33 }; return __func(_, this, arguments, __2, 0, __frame, function __$__2() { return (redisClient.scard(("ip.https." + country), __cb(_, __frame, 1, 42, function ___(__0, __2) { var __1 = ((country + ":") + __2); return _(null, __1); }, true))); }); }); }, true), 10, function __1(_, country) { var __frame = { name: "__1", line: 30 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return (redisClient.scard(("ip.dns." + country), __cb(_, __frame, 1, 42, function ___(__0, __2) { var __1 = ((country + ":") + __2); return _(null, __1); }, true))); }); }); }, true)); }, true)); }, true)); }, true)); }, true)); }); }; showStats(function() {  }); setInterval(function() { return showStats(function() {  }); }, (30 * 1000)); _(); }, true)); })(_); });}).call(this, __trap);
