/*** Generated by streamline 0.10.12 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__trap=__rt.__trap; (function main(_) { var __this = this; var __frame = { name: "main", line: 1 }; return __func(_, this, arguments, main, 0, __frame, function __$main() {























































    return (function ___closure(_) { var counters, redis, redisClient, settings, showStats, util; util = require("util"); settings = require("../settings.js"); global.con = function() { return console.log(Array.prototype.concat(new Date().toISOString(), Array.prototype.slice.call(arguments, 0)).map(function(a) { return util.inspect(a); }).join(" ")); }; redis = require("redis"); redisClient = redis.createClient(); return redisClient.select(settings.redisDB, __cb(_, __frame, 17, 14, function __$___closure() { counters = ["udp.fail","udp","udp.fail.start","udp.start","tcp.fail","tcp","tcp.fail.start","tcp.start","http.fail","http","http.fail.start","http.start","https.fail","https","https.fail.start","https.start",]; showStats = function showStats__1(_) { var countersStats, countriesDNS, countriesHTTP, ipDNScountries, ipHTTPcountries, v; var __frame = { name: "showStats__1", line: 22 }; return __func(_, this, arguments, showStats__1, 0, __frame, function __$showStats__1() { return (function ___closure(_) { var _i, _len, _ref, _results; return redisClient.mget(counters, __cb(_, __frame, 2, 25, function ___(__0, __1) { _ref = __1; _results = []; for (_i = 0, _len = _ref.length; (_i < _len); _i++) { v = _ref[_i]; _results.push((v || 0)); }; return _(null, _results); }, true)); })(__cb(_, __frame, 2, 20, function ___(__0, __3) { countersStats = __3; console.log((((((((((((((((((((((((((((((((((new Date().toISOString() + " ") + "UDP ") + countersStats[0]) + "/") + countersStats[1]) + "_") + countersStats[2]) + "/") + countersStats[3]) + " TCP ") + countersStats[4]) + "/") + countersStats[5]) + "_") + countersStats[6]) + "/") + countersStats[7]) + " HTTP ") + countersStats[8]) + "/") + countersStats[9]) + "_") + countersStats[10]) + "/") + countersStats[11]) + " HTTPS ") + countersStats[12]) + "/") + countersStats[13]) + "_") + countersStats[14]) + "/") + countersStats[15])); return redisClient.hgetall("countries.dns", __cb(_, __frame, 13, 31, function ___(__0, __4) { countriesDNS = __4; return redisClient.hgetall("countries.http", __cb(_, __frame, 14, 32, function ___(__0, __5) { countriesHTTP = __5; return redisClient.smembers("ip.dns.countries", __cb(_, __frame, 15, 33, function ___(__0, __6) { ipDNScountries = __6; return redisClient.smembers("ip.http.countries", __cb(_, __frame, 16, 34, function ___(__0, __7) { ipHTTPcountries = __7; return ipDNScountries.map_(__cb(_, __frame, 17, 36, function ___(__0, __8) { ipDNScountries = __8; return ipHTTPcountries.map_(__cb(_, __frame, 20, 38, function ___(__0, __9) { ipHTTPcountries = __9; con("DNS", countriesDNS); con("HTTP", countriesHTTP); con("DNS", ipDNScountries); return _(null, con("HTTP", ipHTTPcountries)); }, true), 10, function __2(_, country) { var __frame = { name: "__2", line: 42 }; return __func(_, this, arguments, __2, 0, __frame, function __$__2() { return (redisClient.scard(("ip.http." + country), __cb(_, __frame, 1, 42, function ___(__0, __2) { var __1 = ((country + ":") + __2); return _(null, __1); }, true))); }); }); }, true), 10, function __1(_, country) { var __frame = { name: "__1", line: 39 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return (redisClient.scard(("ip.dns." + country), __cb(_, __frame, 1, 42, function ___(__0, __2) { var __1 = ((country + ":") + __2); return _(null, __1); }, true))); }); }); }, true)); }, true)); }, true)); }, true)); }, true)); }); }; showStats(function() {  }); setInterval(function() { return showStats(function() {  }); }, (3 * 1000)); _(); }, true)); })(_); });}).call(this, __trap);
