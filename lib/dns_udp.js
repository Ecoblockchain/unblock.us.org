/*** Generated by streamline 0.10.12 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb; (function() {
  var libDNS, settings, toClient, toDNSserver, udp;

  udp = require("dgram");

  settings = require("../settings");

  libDNS = require("./dns");

  toDNSserver = function toDNSserver__1(DNSlistenServer, redisClient, data, info, version, parsed, _) { var keyName, keys, values; var __frame = { name: "toDNSserver__1", line: 10 }; return __func(_, this, arguments, toDNSserver__1, 6, __frame, function __$toDNSserver__1() {

      keyName = ((((libDNS.parse2Bytes(parsed.ID) + "-") + parsed.QUESTION.TYPE) + "-") + parsed.QUESTION.NAME.join("."));
      keys = [(keyName + "-port"),(keyName + "-IP"),(keyName + "-version"),];
      values = [info.port,info.address,version,];
      return keys.forEach_(__cb(_, __frame, 5, 9, function __$toDNSserver__1() {



        return _(null, DNSlistenServer.send(data, 0, data.length, settings.forwardDNSport, settings.forwardDNS)); }, true), -1, function __1(_, k, i) { var __frame = { name: "__1", line: 15 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return redisClient.set([k,values[i],], __cb(_, __frame, 1, 18, function __$__1() { return redisClient.expire(k, 12, __cb(_, __frame, 2, 25, _, true)); }, true)); }); }); }); };


  toClient = function toClient__2(UDPservers, redisClient, data, _) { var ip, keyName, parsed, port, version, _ref; var __frame = { name: "toClient__2", line: 22 }; return __func(_, this, arguments, toClient__2, 3, __frame, function __$toClient__2() {

      parsed = libDNS.parseDNS(data);
      keyName = ((((libDNS.parse2Bytes(parsed.ID) + "-") + parsed.QUESTION.TYPE) + "-") + parsed.QUESTION.NAME.join(".")); return (function __$toClient__2(_) {
        return redisClient.mget([(keyName + "-port"),(keyName + "-IP"),(keyName + "-version"),], __cb(_, __frame, 4, 23, function ___(__0, __1) { _ref = __1; port = _ref[0]; ip = _ref[1]; return _(null, version = _ref[2]); }, true)); })(__cb(_, __frame, -21, 7, function __$toClient__2() {
        if (!(((((port != null)) && ((ip != null))) && ((version != null))))) {
          return _(new Error(("Took too long for: " + parsed.QUESTION.NAME.join(".")))); } ;

        UDPservers[("udp" + version)].send(data, 0, data.length, port, ip);
        return _(null, ip); }, true)); }); };


  module.exports = {
    toDNSserver: toDNSserver,
    toClient: toClient };


}).call(this);
